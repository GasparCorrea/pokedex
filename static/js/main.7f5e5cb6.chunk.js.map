{"version":3,"sources":["PokemonEntry.js","PokemonSelector.js","PokemonPreview.js","PokemonDescription.js","MyFooter.js","MyHeader.js","App.js","serviceWorker.js","index.js"],"names":["PokemonEntry","className","alt","src","this","props","number","toString","padStart","name","React","Component","PokemonSelector","Object","keys","pokemons","map","pokemon","i","key","onClick","buttonClick","toUpperCase","PokemonPreview","selected","sprite","PokemonDescription","padEnd","types","parseInt","weight","hp","attack","defense","speed","MyFooter","href","MyHeader","App","handleChange","param","e","id","setState","data","state","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f5e5cb6.chunk.js","sourcesContent":["import React from 'react'\nimport './PokemonEntry.css';\n\nclass PokemonEntry extends React.Component{\n    render() {\n      return(\n        <div className=\"entry\">\n            <div className=\"entry-item\">\n                        <img className=\"pb\" alt=\"Pokeball\" src=\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/items/poke-ball.png\"/>\n            </div>\n            <div className=\"entry-item entry-text\">\n                        {\"№ \"+this.props.number.toString().padStart(3,\"0\")}\n            </div>\n            <div className=\"entry-item entry-text\">\n                        {this.props.name.padStart(11,\"\\u00a0\")}\n            </div>\n\n\n        </div>\n      )\n      \n    }\n  }\n  \n  export default PokemonEntry;","import React from 'react';\nimport './PokemonSelector.css';\nimport PokemonEntry from './PokemonEntry'\n\nclass PokemonSelector extends React.Component{\n  render() {\n    return(\n      <div className=\"selector\">\n        { Object.keys(this.props.pokemons).map((pokemon, i) => {\n           return (<div  key={i} className=\"select-pokemon\" onClick={this.props.buttonClick(i)}><PokemonEntry key={i} number={i+1} name={this.props.pokemons[i].name.toUpperCase()}/></div>) \n        })}  \n      </div>\n    )\n    \n  }\n}\n\nexport default PokemonSelector;\n","import React from 'react';\nimport './PokemonPreview.css';\n\n\nclass PokemonPreview extends React.Component{\n  render() {\n    return(\n      <div className=\"preview\">\n        <img className=\"sprite\" src={this.props.selected.sprite} alt=\"sprite\"/>\n      </div>\n    )\n    \n  }\n}\n\nexport default PokemonPreview;","import React from 'react';\nimport './PokemonDescription.css';\nimport PokemonPreview from './PokemonPreview'\n\nclass PokemonDescription extends React.Component{\n  render() {\n    return(\n      <div className=\"description\">\n        <div className=\"top-row\">\n          <PokemonPreview selected={this.props.selected}/>\n          <div className=\"title\">\n            {this.props.selected.name.toUpperCase().padEnd(12,\"\\u00a0\")} {\"№\"+this.props.selected.number.toString().padStart(3,\"0\")}\n          </div>\n        </div>\n          Type: {this.props.selected.types.toString().toUpperCase()}\n          <br/>\n          Weight: {parseInt(this.props.selected.weight)/10} kg\n          <br/>\n          HP: {this.props.selected.hp.toString().padEnd(3,\"\\u00a0\")} | ATK: {this.props.selected.attack.toString().padEnd(3,\"\\u00a0\")} | DEF: {this.props.selected.defense.toString().padEnd(3,\"\\u00a0\")} | SP ATK: {this.props.selected[\"special-attack\"].toString().padEnd(3,\"\\u00a0\")} | SP DEF: {this.props.selected[\"special-defense\"].toString().padEnd(3,\"\\u00a0\")} | SPEED: {this.props.selected.speed.toString().padEnd(3,\"\\u00a0\")}\n      </div>\n    )\n    \n  }\n}\n\nexport default PokemonDescription;","import React from 'react';\nimport './MyFooter.css';\n\n\nclass MyFooter extends React.Component{\n  render() {\n    return(\n      <footer className=\"footer\">\n          made by <a href=\"https://github.com/GasparCorrea\">GasparCorrea</a>.\n          <small> Pokémon and Pokémon character names are trademarks of Nintendo.</small>\n      </footer>\n    )\n    \n  }\n}\n\nexport default MyFooter;","import React from 'react';\nimport './MyHeader.css';\n\n\nclass MyHeader extends React.Component{\n  render() {\n    return(\n      <header className=\"header\">\n          Pokedex\n      </header>\n    )\n    \n  }\n}\n\nexport default MyHeader;","import React from 'react';\nimport './App.css';\nimport PokemonSelector from './PokemonSelector'\nimport PokemonDescription from './PokemonDescription';\nimport MyFooter from './MyFooter'\nimport MyHeader from './MyHeader'\nimport data from './pokemon.json'\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n        selected: data[\"0\"]\n      };\n  }\n\n  handleChange = param => e => {\n    // param is the argument you passed to the function\n    // e is the event object that returned\n    let id = (param).toString();\n    this.setState({selected : data[id]});\n};\n  render(){\n    return(\n        <div>\n        <MyHeader/>\n        <div className=\"content\">\n            <div className=\"content-item\">\n                <PokemonDescription  selected={this.state.selected} />\n            </div>\n            <div className=\"content-item\">\n                <PokemonSelector buttonClick={this.handleChange} pokemons={data} />\n            </div>\n        </div>\n        <MyFooter/>\n      </div>\n    )\n    \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}